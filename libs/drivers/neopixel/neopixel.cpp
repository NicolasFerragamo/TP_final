/*********************************************************************************************************
 *
 * \file		${file_name}
 * \brief		
 * \date		${date}
 * \author		
 * \version 
*********************************************************************************************************/

/*********************************************************************************************************
 *** INCLUDES
*********************************************************************************************************/
#include <stddef.h>
#include <stdint.h>
#include "mbed.h"
#include "encoder.h"
#include "lcd.h"
#include "neopixel.h"


/*********************************************************************************************************
 *** DEFINES PRIVADOS AL MODULO
*********************************************************************************************************/
// bit timings
// one
#define T1H 800
#define T1L 450 

//zero
#define T0H 400
#define T0L 850

/*********************************************************************************************************
 *** MACROS PRIVADAS AL MODULO
*********************************************************************************************************/

/*********************************************************************************************************
 *** TIPOS DE DATOS PRIVADOS AL MODULO
*********************************************************************************************************/


/*********************************************************************************************************
 *** TABLAS PRIVADAS AL MODULO
*********************************************************************************************************/

/*********************************************************************************************************
 *** VARIABLES GLOBALES PUBLICAS
*********************************************************************************************************/

/*********************************************************************************************************
 *** VARIABLES GLOBALES PRIVADAS AL MODULO
*********************************b************************************************************************/

DigitalOut       neopixel_out(D13); //!< 




/*********************************************************************************************************
 *** PROTOTIPO DE FUNCIONES PRIVADAS AL MODULO
*********************************************************************************************************/
void neopixel_send_data(uint32_t color);

/*********************************************************************************************************
 *** FUNCIONES PRIVADAS AL MODULO
*********************************************************************************************************/

void neopixel_send_data(uint32_t color)
{
    neopixel_out = 0;
     __disable_irq();
    for (uint8_t i = 24; i > 0; i--)
    {
        if ((color >> (i-1) & 0x01) == 0)
        {
            neopixel_out = 1;
            wait_ns(1); // 400
            neopixel_out = 0;
            wait_ns(395); // 850
        }
        else
        {
            neopixel_out = 1;
            wait_ns(370);  //800
            neopixel_out = 0;
            wait_ns(1);  //450
        }
    }
     __enable_irq();
}

/*********************************************************************************************************
 *** FUNCIONES GLOBALES AL MODULO
*********************************************************************************************************/
/**
    \fn         void temp_sensor_Init(uint64_t fs, uint64_t screen_update)
    \brief      Inicializa el sensor de temperatura, se establece la frecuencia
                de muestreo del ADC y la frecuencia de actualización de la pantalla,
                se setea la referencia del sensor de temperatura a 3.3V
    \param      fs [in] Frecuencia de muestreo del ADC
    \param      screen_update [in] Frecuencia de actualización de la pantalla
    \author     Nicolas Ferragamo
    \date       ${date}
*/

void neopixel_write(const neopixel_color_t * color)
{
    uint32_t aux = 0;
    aux |= (color->G << 16) | (color->R << 8) | color->B;
    neopixel_out = 0;
    neopixel_send_data(aux);
    neopixel_out = 1; // si no lo dejo en uno se reinicia

}


